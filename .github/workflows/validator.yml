name: Validator

on:
  push:
    paths:
      - app_python/**

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app_python
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')
    - name: Running unit tests
      run: |
        pytest
    - name: Set up Snyk CLI to check for security issues
      # Snyk can be used to break the build when it detects security issues.
      # In this case we want to upload the SAST issues to GitHub Code Scanning
      uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

      # For Snyk Open Source you must first set up the development environment for your application's dependencies
      # For example for Node
      #- uses: actions/setup-node@v3
      #  with:
      #    node-version: 16
      
      env:
        # This is where you will need to introduce the Snyk API token created with your Snyk account
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
      # Use || true to not fail the pipeline
    - name: Snyk auth
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
    - name: Snyk Code test
      run: snyk test

